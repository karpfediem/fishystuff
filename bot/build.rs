use std::fs::File;
use std::{fs, io::Write, path::Path};

fn main() {
    generate_file_with_constant(
        dir_names("bdo-fish-waypoints/Bookmark"),
        "ZONE_NAMES",
        "src/zones/zone_names.rs",
    );
    generate_file_with_constant(
        dir_names("bdo-fish-waypoints/FishBookmark"),
        "FISH_NAMES",
        "src/zones/fish_names.rs",
    );
}

fn generate_file_with_constant<P: AsRef<Path>>(
    values: Vec<String>,
    name_of_constant: impl Into<String>,
    path: P,
) {
    let mut file = File::create(path).unwrap();
    writeln!(file, "// THIS FILE IS AUTOGENERATED AT BUILD TIME").unwrap();
    writeln!(file, "pub static {}: &[&str] = &[", name_of_constant.into()).unwrap();
    for value in values {
        writeln!(file, "    {:?},", value).unwrap();
    }
    writeln!(file, "];").unwrap();
}

fn dir_names<P: AsRef<Path>>(path: P) -> Vec<String> {
    let dirs = fs::read_dir(path).expect("Could not read path for dir names");
    let mut dir_names: Vec<_> = dirs
        .filter(|x| x.as_ref().is_ok_and(|entry| entry.path().is_dir()))
        .map(|y| {
            let entry = y.unwrap();
            entry.path().file_name().unwrap().to_str().unwrap().to_string()
        })
        .collect();

    dir_names.sort();
    dir_names
}
